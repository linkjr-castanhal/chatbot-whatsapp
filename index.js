const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');

const client = new Client({
    authStrategy: new LocalAuth()
});

const menuEnviado = {};
const aguardandoSugestao = {};

client.on('ready', () => {
    console.log('Conectado com sucesso!');
});

client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

const greetings = ["oi", "ol√°", "hello", "hi", "bom dia", "boa tarde", "boa noite", "salve", "aoba"];

function saudacao() {
    const data = new Date();
    let hora = data.getHours();
    let str = '';
    if (hora >= 8 && hora < 15) {
        str = 'Bom dia ';
    } else if (hora >= 15 && hora < 21) {
        str = 'Boa tarde ';
    } else {
        str = 'Boa noite ';
    }
    return str;
};

function fimDeSemana() {
    const data = new Date();
    let dia = data.getDay();
    let strtres = '';
    if (dia === 0) { // Domingo
        strtres = 'üèñÔ∏è *Aproveite o domingo!*\n\nüòÉ Entraremos em contato assim que poss√≠vel.\n\nüïò Nosso hor√°rio √© de segunda a sexta de 09:00hs √†s 19:00hs\n\n*Atendimento presencial mediante agendamento.*';
    } else if (dia === 6) { // S√°bado
        strtres = 'üèñÔ∏è *Aproveite o s√°bado!*\n\nüòÉ Entraremos em contato assim que poss√≠vel.\n\nüïò Nosso hor√°rio √© de segunda a sexta de 09:00hs √†s 19:00hs\n\n*Atendimento presencial mediante agendamento.*';
    }
    return strtres;
};

async function processarSaudacao(message) {
    const fimDeSemanaMensagem = fimDeSemana();
    if (fimDeSemanaMensagem === '') {
        const chat = await message.getChat();
        const contact = await message.getContact();
        const name = contact.pushname || "Cliente";
        await chat.sendStateTyping();
        message.reply(
            saudacao() + name.split(" ")[0] + 
            "!\nSou o assistente inteligente da *LinkJr*, ficamos felizes por entrar em contato conosco.\n\n" +
            "Digite o n√∫mero da op√ß√£o desejada:\n" +
            "1Ô∏è‚É£ - Solicitar or√ßamento\n" +
            "2Ô∏è‚É£ - Conhecer nossos produtos (portf√≥lio)\n" +
            "3Ô∏è‚É£ - Falar com um atendente\n" +
            "4Ô∏è‚É£ - D√∫vidas frequentes\n" +
            "5Ô∏è‚É£ - Outra op√ß√£o\n" +
            "6Ô∏è‚É£ - Sair da conversa"
        );
        menuEnviado[message.from] = true;
    } else {
        client.sendMessage(message.from, fimDeSemanaMensagem);
    }
}

function despedida() {
    return (
        "üëã *Encerrando a conversa...*\n\n" +
        "Agradecemos por utilizar nossos servi√ßos. Foi um prazer poder ajud√°-lo(a) com suas d√∫vidas e necessidades. Caso precise de mais assist√™ncia no futuro, estaremos sempre √† disposi√ß√£o para atend√™-lo(a).\n\n" +
        "Desejamos um excelente dia e sucesso em suas atividades. At√© a pr√≥xima!"
    );
}

function tratarOpcoes(opcao) {
    switch (opcao) {
        case '1':
            return "üìù *Solicitar or√ßamento*\nPor favor, informe os detalhes do que voc√™ precisa. Entraremos em contato com uma proposta personalizada.";
        case '2':
            return "üìÇ *Conhecer nossos produtos*\nConfira nosso portf√≥lio em: https://github.com/linkjrcastanhal.";
        case '3':
            return "üìû *Falar com um atendente*\nPor favor, aguarde enquanto conectamos voc√™ com um de nossos atendentes.";
        case '4':
            return "‚ùì *D√∫vidas Frequentes*\nAcesse nossa p√°gina de d√∫vidas frequentes em: https://linkjr.com.br/.";
        case '5':
            return "üí¨ *Outra op√ß√£o*\nDescreva como podemos ajudar e retornaremos o mais r√°pido poss√≠vel.";
        case '6':
            return despedida();
        default:
            return "‚ùå *Op√ß√£o inv√°lida.* Por favor, escolha uma das op√ß√µes dispon√≠veis.";
    }
}

client.on('message', async (message) => {
    const messageText = message.body.toLowerCase();

    // Se o usu√°rio estiver no estado de aguardando sugest√£o
    if (aguardandoSugestao[message.from]) {
        message.reply("üíæ *Sugest√£o salva!*\nObrigado por compartilhar sua sugest√£o. Vamos analis√°-la com aten√ß√£o.");
        delete aguardandoSugestao[message.from]; // Reseta o estado de sugest√£o
        return;
    }

    // Sauda√ß√µes iniciais
    if (greetings.some((greeting) => messageText.includes(greeting))) {
        await processarSaudacao(message);
    } else if (!isNaN(messageText) && menuEnviado[message.from]) {
        // Verifica se √© uma op√ß√£o v√°lida e o menu foi enviado
        const resposta = tratarOpcoes(messageText.trim());
        if (resposta) {
            message.reply(resposta);
            if (messageText === '5') {
                // Marca que o usu√°rio entrou no estado de sugest√£o
                aguardandoSugestao[message.from] = true;
            } else if (messageText === '6') {
                // Remove o contato do controle de estado ap√≥s a despedida
                delete menuEnviado[message.from];
            }
        } else {
            message.reply("‚ùå *Op√ß√£o inv√°lida.* Por favor, escolha uma das op√ß√µes dispon√≠veis.");
        }
    } else if (menuEnviado[message.from]) {
        // Mensagem para entrada inv√°lida apenas se o menu j√° foi enviado
        message.reply("‚ùì N√£o entendi sua mensagem. Por favor, digite o n√∫mero correspondente √† op√ß√£o desejada.");
    }
});


client.initialize();
